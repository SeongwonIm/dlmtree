// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// controlEst
List controlEst(const Eigen::Map<Eigen::VectorXd> R, const Eigen::Map<Eigen::MatrixXd> Z, const Eigen::Map<Eigen::MatrixXd> V, const Eigen::Map<Eigen::MatrixXd> Vchol, double sigma2, double sumTermXP, double sumFexp);
RcppExport SEXP _dlmtree_dev_controlEst(SEXP RSEXP, SEXP ZSEXP, SEXP VSEXP, SEXP VcholSEXP, SEXP sigma2SEXP, SEXP sumTermXPSEXP, SEXP sumFexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Vchol(VcholSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sumTermXP(sumTermXPSEXP);
    Rcpp::traits::input_parameter< double >::type sumFexp(sumFexpSEXP);
    rcpp_result_gen = Rcpp::wrap(controlEst(R, Z, V, Vchol, sigma2, sumTermXP, sumFexp));
    return rcpp_result_gen;
END_RCPP
}
// cppIntersection
std::vector<int> cppIntersection(const IntegerVector& A, const IntegerVector& B);
RcppExport SEXP _dlmtree_dev_cppIntersection(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cppIntersection(A, B));
    return rcpp_result_gen;
END_RCPP
}
// dlnmEst
SEXP dlnmEst(arma::dmat dlnm, arma::dvec xsplits, int nlags, int nsamp, double center, double se, bool smooth, bool dlm);
RcppExport SEXP _dlmtree_dev_dlnmEst(SEXP dlnmSEXP, SEXP xsplitsSEXP, SEXP nlagsSEXP, SEXP nsampSEXP, SEXP centerSEXP, SEXP seSEXP, SEXP smoothSEXP, SEXP dlmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::dmat >::type dlnm(dlnmSEXP);
    Rcpp::traits::input_parameter< arma::dvec >::type xsplits(xsplitsSEXP);
    Rcpp::traits::input_parameter< int >::type nlags(nlagsSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< double >::type center(centerSEXP);
    Rcpp::traits::input_parameter< double >::type se(seSEXP);
    Rcpp::traits::input_parameter< bool >::type smooth(smoothSEXP);
    Rcpp::traits::input_parameter< bool >::type dlm(dlmSEXP);
    rcpp_result_gen = Rcpp::wrap(dlnmEst(dlnm, xsplits, nlags, nsamp, center, se, smooth, dlm));
    return rcpp_result_gen;
END_RCPP
}
// dlnmMHR1
List dlnmMHR1(const Eigen::Map<Eigen::VectorXd>& Y, const Eigen::Map<Eigen::MatrixXd>& Z, double& XX, const Eigen::Map<Eigen::VectorXd>& ZtX, const Eigen::Map<Eigen::VectorXd>& VgZtX, const Eigen::Map<Eigen::MatrixXd>& Vg, const Eigen::Map<Eigen::VectorXd>& Xd, const Eigen::Map<Eigen::VectorXd>& ZY, double LInv, double sigma);
RcppExport SEXP _dlmtree_dev_dlnmMHR1(SEXP YSEXP, SEXP ZSEXP, SEXP XXSEXP, SEXP ZtXSEXP, SEXP VgZtXSEXP, SEXP VgSEXP, SEXP XdSEXP, SEXP ZYSEXP, SEXP LInvSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double& >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type ZtX(ZtXSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type VgZtX(VgZtXSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Vg(VgSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Xd(XdSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type ZY(ZYSEXP);
    Rcpp::traits::input_parameter< double >::type LInv(LInvSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dlnmMHR1(Y, Z, XX, ZtX, VgZtX, Vg, Xd, ZY, LInv, sigma));
    return rcpp_result_gen;
END_RCPP
}
// dlnmMHR
List dlnmMHR(const Eigen::Map<Eigen::VectorXd>& Y, const Eigen::Map<Eigen::MatrixXd>& Z, const Eigen::Map<Eigen::MatrixXd>& ZtX, const Eigen::Map<Eigen::MatrixXd>& VgZtX, const Eigen::Map<Eigen::MatrixXd>& Vg, const Eigen::Map<Eigen::MatrixXd>& Xd, const Eigen::Map<Eigen::VectorXd>& ZY, double LInv, double sigma);
RcppExport SEXP _dlmtree_dev_dlnmMHR(SEXP YSEXP, SEXP ZSEXP, SEXP ZtXSEXP, SEXP VgZtXSEXP, SEXP VgSEXP, SEXP XdSEXP, SEXP ZYSEXP, SEXP LInvSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type ZtX(ZtXSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type VgZtX(VgZtXSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Vg(VgSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Xd(XdSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type ZY(ZYSEXP);
    Rcpp::traits::input_parameter< double >::type LInv(LInvSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dlnmMHR(Y, Z, ZtX, VgZtX, Vg, Xd, ZY, LInv, sigma));
    return rcpp_result_gen;
END_RCPP
}
// minmax
NumericVector minmax(NumericVector x);
RcppExport SEXP _dlmtree_dev_minmax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(minmax(x));
    return rcpp_result_gen;
END_RCPP
}
// nodeCount
List nodeCount(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& Z, const Eigen::Map<Eigen::MatrixXd>& Vg, NumericVector parCount, double xmin, double xmax, double tmin, double tmax);
RcppExport SEXP _dlmtree_dev_nodeCount(SEXP XSEXP, SEXP ZSEXP, SEXP VgSEXP, SEXP parCountSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP tminSEXP, SEXP tmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Vg(VgSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parCount(parCountSEXP);
    Rcpp::traits::input_parameter< double >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(nodeCount(X, Z, Vg, parCount, xmin, xmax, tmin, tmax));
    return rcpp_result_gen;
END_RCPP
}
// nodeCountSE
List nodeCountSE(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& SE, const Eigen::Map<Eigen::MatrixXd>& Z, const Eigen::Map<Eigen::MatrixXd>& Vg, NumericVector parCount, double xmin, double xmax, double tmin, double tmax);
RcppExport SEXP _dlmtree_dev_nodeCountSE(SEXP XSEXP, SEXP SESEXP, SEXP ZSEXP, SEXP VgSEXP, SEXP parCountSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP tminSEXP, SEXP tmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type SE(SESEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Vg(VgSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parCount(parCountSEXP);
    Rcpp::traits::input_parameter< double >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(nodeCountSE(X, SE, Z, Vg, parCount, xmin, xmax, tmin, tmax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dlmtree_dev_controlEst", (DL_FUNC) &_dlmtree_dev_controlEst, 7},
    {"_dlmtree_dev_cppIntersection", (DL_FUNC) &_dlmtree_dev_cppIntersection, 2},
    {"_dlmtree_dev_dlnmEst", (DL_FUNC) &_dlmtree_dev_dlnmEst, 8},
    {"_dlmtree_dev_dlnmMHR1", (DL_FUNC) &_dlmtree_dev_dlnmMHR1, 10},
    {"_dlmtree_dev_dlnmMHR", (DL_FUNC) &_dlmtree_dev_dlnmMHR, 9},
    {"_dlmtree_dev_minmax", (DL_FUNC) &_dlmtree_dev_minmax, 1},
    {"_dlmtree_dev_nodeCount", (DL_FUNC) &_dlmtree_dev_nodeCount, 8},
    {"_dlmtree_dev_nodeCountSE", (DL_FUNC) &_dlmtree_dev_nodeCountSE, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_dlmtree_dev(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
